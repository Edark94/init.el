from typing import List, Set  # noqa

def weightlifting_subset(P: Set[int], W: int) -> Set[int]:
    '''
    Sig:  Set[int], int -> Set[int]
    Pre:
    Post:
    Ex:   P = {2, 32, 234, 35, 12332, 1, 7, 56}
          weightlifting_subset(P, 299) = {56, 7, 234, 2}
          weightlifting_subset(P, 11) = {}
    '''
    wt = list(P)
    n = len(wt)
    # Initialise the dynamic programming matrix, A
    K = [
        [None for i in range(W + 1)] for j in range(n + 1)
    ]
    Trail = [
        [None for i in range(W + 1)] for j in range(n + 1)
    ]
    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                K[i][w] = 0
                Trail[i][w] = []
            elif wt[i-1] <= w:
                if wt[i-1] + K[i-1][w-wt[i-1]] < K[i-1][w]:                    
                    K[i][w] = K[i-1][w]                    
                    Trail[i][w] = Trail[i-1][w]
                else:
                    K[i][w] = wt[i-1] + K[i-1][w-wt[i-1]]
                    Trail[i][w] = Trail[i-1][w-wt[i-1]]
                    Trail[i][w].append(wt[i-1])
            else:
                K[i][w] = K[i-1][w]
                Trail[i][w] = Trail[i-1][w]
    #print('The run is: ', K[n][W] == W, ' with the set: ',Trail[n][W],'\n')
    return set(Trail[n][W]) if K[n][W] == W else set([]) 

def main():
    
main()
