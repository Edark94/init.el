#include <iostream>
#include <chrono>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
#include <ca/ImageProcessor.h>

using namespace ContourAnalysis;

void draw_result(const ImageProcessor& processor, cv::Mat& outputImage)
{
    drawContours(outputImage, processor.getContours(), -1, CV_RGB(255, 0, 0), 1, cv::LINE_8);
    for (auto& t : processor.getFoundTemplates()) {
        const cv::Rect& rect = t.sample.contour.sourceBoundingRect;
        std::string text = t.ctemplate.name;
        cv::rectangle(outputImage, rect, CV_RGB(0, 255, 0));
        auto p = cv::Point(rect.x, rect.y);
        cv::putText(outputImage, text, p, cv::FONT_HERSHEY_COMPLEX, 1., CV_RGB(0, 0, 0), 3, 1);
        cv::putText(outputImage, text, p, cv::FONT_HERSHEY_COMPLEX, 1., CV_RGB(255, 255, 255), 1, 1);
    }
}

int main(int argc, char* argv[])
{
    if (argc < 2) {
        std::cout << "Usage: " << argv[0] << " templates [input_image_1 .. input_image_N]" << std::endl;
    }
    const char* templatesFileName = (argc < 2) ? "../data/Tahoma.pbf" : argv[1];

    try
    {
        ImageProcessor processor;
        // ImageProcessor settings...

        processor.loadTemplates(templatesFileName);
        if (argc > 2) {
            for (int i = 2; i < argc; ++i) {
                std::cout << argv[i] << std::endl;
                cv::Mat inputImage = cv::imread(argv[i]);
                if (inputImage.empty()) {
                    throw std::runtime_error("can not read image");
                }
                cv::Mat outputImage = inputImage.clone();
                std::chrono::time_point<std::chrono::high_resolution_clock> timeEnd, timeStart = std::chrono::high_resolution_clock::now();
                processor.processImage(inputImage);
                timeEnd = std::chrono::high_resolution_clock::now();
                std::cout << "processing: " << std::chrono::duration_cast<std::chrono::milliseconds>(timeEnd - timeStart).count() << " ms" << std::endl;
                // uncomment next line to draw on binarized image
                //cv::cvtColor(processor.binarizedFrame, outputImage, cv::COLOR_GRAY2BGR);
                draw_result(processor, outputImage);
                timeEnd = std::chrono::high_resolution_clock::now();
                std::cout << "total:      " << std::chrono::duration_cast<std::chrono::milliseconds>(timeEnd - timeStart).count() << " ms" << std::endl;
                cv::imshow("Result", outputImage);
                cv::waitKey(0);
            }
        }
        else {
            cv::VideoCapture cap(0);
            cv::Mat frame;
            if (!cap.isOpened()) return 1;
            for (;;) {
                cap >> frame;
                if (frame.empty()) return 1;
                processor.processImage(frame);
                draw_result(processor, frame);
                cv::imshow("Result", frame);
                if (cv::waitKey(1) == 27) break;
            }
        }
        return 0;
    }
    catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }
    catch (...) {
        std::cerr << "Unknown exception" << std::endl;
    }
	return 1;
}
