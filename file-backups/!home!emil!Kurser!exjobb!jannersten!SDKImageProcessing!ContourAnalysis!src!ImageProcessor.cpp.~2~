#include <set>
#include <algorithm>
#include <fstream>
#include <thread>
#include <iostream>
#include <opencv2/imgcodecs.hpp>
#include "opencv2/imgproc.hpp"
#include "opencv2/highgui.hpp"

#include <ca/ImageProcessor.h>
#include "PbTemplates.pb.h"

#ifdef _WIN32
#include <filesystem>
namespace fsns = std::experimental::filesystem;
#else
#include <dirent.h>
#endif

namespace ContourAnalysis
{

bool contains(cv::Rect& bigR, cv::Rect& r)
{
    return r == (bigR & r);
}

void ImageProcessor::loadTemplates(const std::string& fileName)
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    PbTemplates pbTemplates;
    std::fstream in(fileName, std::ios::in | std::ios::binary);
    if (!pbTemplates.ParseFromIstream(&in)) {
        throw std::runtime_error("loadTemplates failed");
    }

    templates.clear();
    templates.templateSize = pbTemplates.templatesize();
    for (int i = 0; i < pbTemplates.templates_size(); ++i) {
        const PbTemplate& pbTemplate = pbTemplates.templates(i);
        const PbContour& pbContour = pbTemplate.contour();
        Contour contour(pbContour.array_size());
        for (int j = 0; j < pbContour.array_size(); ++j) {
            const PbComplex& pbComplex = pbContour.array(j);
            contour[j] = Complex(pbComplex.a(), pbComplex.b());
        }
        const PbRectangle& pbRect = pbContour.sourceboundingrect();
        contour.sourceBoundingRect = cv::Rect(pbRect.x(), pbRect.y(), pbRect.w(), pbRect.h());
        cv::Point startPoint = cv::Point(pbTemplate.startpoint().x(), pbTemplate.startpoint().y());
        templates.emplace_back(pbTemplate.name(), contour, startPoint, pbTemplate.sourcearea(), pbTemplate.preferredanglenomore90());
    }
}

void ImageProcessor::saveTemplates(const std::string& fileName)
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    PbTemplates pbTemplates;
    pbTemplates.set_templatesize(templates.templateSize);
    for (auto& templ : templates) {
        PbTemplate* pbTemplate = pbTemplates.add_templates();
        pbTemplate->set_name(templ.name);
        pbTemplate->mutable_startpoint()->set_x(templ.startPoint.x);
        pbTemplate->mutable_startpoint()->set_y(templ.startPoint.y);
        pbTemplate->set_sourcearea(templ.sourceArea);
        pbTemplate->set_preferredanglenomore90(templ.preferredAngleNoMore90);
        PbContour* pbContour = pbTemplate->mutable_contour();
        auto& sourceBoundingRect = templ.contour.sourceBoundingRect;
        PbRectangle* pbRect = pbContour->mutable_sourceboundingrect();
        pbRect->set_x(sourceBoundingRect.x);
        pbRect->set_y(sourceBoundingRect.y);
        pbRect->set_w(sourceBoundingRect.width);
        pbRect->set_h(sourceBoundingRect.height);
        for (int i = 0; i < templ.contour.count(); ++i) {
            auto& complex = templ.contour[i];
            PbComplex* pbComplex = pbContour->add_array();
            pbComplex->set_a(complex.a);
            pbComplex->set_b(complex.b);
        }
    }
    std::fstream out(fileName, std::ios::out | std::ios::trunc | std::ios::binary);
    if (!pbTemplates.SerializeToOstream(&out)) {
        throw std::runtime_error("saveTemplates failed");
    }
}

void ImageProcessor::processImage(cv::Mat& image)
{
    cv::Mat grayFrame = image.clone();
    std::cout << "Hello world";
    if (grayFrame.channels() == 3) {
        cv::cvtColor(grayFrame, grayFrame, cv::COLOR_BGR2GRAY);
    }

    if (equalizeHist) {
        cv::equalizeHist(grayFrame, grayFrame);  // autocontrast
    }

    // smoothed
    // down-scale and upscale the image to filter out the noise
    cv::Mat smoothedGrayFrame;
    cv::pyrDown(grayFrame, smoothedGrayFrame, cv::Size(grayFrame.cols / 2, grayFrame.rows / 2));
    cv::pyrUp(smoothedGrayFrame, smoothedGrayFrame, grayFrame.size());

    // canny
    cv::Mat cannyFrame;
    if (noiseFilter) {
        cv::Canny(smoothedGrayFrame, cannyFrame, 0, cannyThreshold);
    }

    // smoothing
    if (blur) {
        grayFrame = smoothedGrayFrame;
    }

    // binarize
    cv::adaptiveThreshold(grayFrame, grayFrame, 255, cv::ADAPTIVE_THRESH_MEAN_C, cv::THRESH_BINARY,
        adaptiveThresholdBlockSize + adaptiveThresholdBlockSize % 2 + 1, adaptiveThresholdParameter);

    grayFrame = ~grayFrame;

    if (addCanny) {
        if (!cannyFrame.empty()) {
            grayFrame |= cannyFrame;
        }
    }

    binarizedFrame = grayFrame;

    // dilate canny contours for filtering
    if (!cannyFrame.empty()) {
        cv::Mat kernel = cv::Mat::ones(3, 3, CV_8U);
        cv::dilate(cannyFrame, cannyFrame, kernel);
    }

    // find contours
    std::vector<std::vector<cv::Point>> sourceContours;
    cv::findContours(grayFrame, sourceContours, cv::RETR_LIST, cv::CHAIN_APPROX_NONE);

    // filter contours
    contours = filterContours(sourceContours, cannyFrame, grayFrame.size().width, grayFrame.size().height);

    // find templates
    foundTemplates.clear();
    samples.clear();
    size_t contourId = contours.size();
    std::mutex contourIdMutex, samplesMutex, foundTemplatesMutex;
    std::vector<std::thread> workers;
    for (int i = (threadCount == 0) ? std::thread::hardware_concurrency() : threadCount; i > 0; --i) {
        workers.push_back(std::thread([&]() {
            size_t id = 0;
            for (;;) {
                {
                    std::unique_lock<std::mutex> locker(contourIdMutex);
                    if (contourId == 0) break;
                    id = --contourId;
                }
                double area = cv::contourArea(contours[id]);
                Template sample(contours[id], area, samples.templateSize);
                {
                    std::unique_lock<std::mutex> locker(samplesMutex);
                    samples.push_back(sample);
                }
                if (!onlyFindContours) {
                    FoundTemplateDesc desc;
                    if (finder.findTemplate(templates, sample, desc)) {
                        std::unique_lock<std::mutex> locker(foundTemplatesMutex);
                        foundTemplates.push_back(desc);
                    }
                }
            }
        }));
    }
    for (auto& t : workers) {
        t.join();
    }
    filterByIntersection(foundTemplates);
}

void ImageProcessor::filterByIntersection(std::vector<FoundTemplateDesc>& templates)
{
    // sort by area
    std::sort(templates.begin(), templates.end(), [](const FoundTemplateDesc& t1, const FoundTemplateDesc& t2)
        { return t1.sample.contour.sourceBoundingRect.area() > t2.sample.contour.sourceBoundingRect.area(); });

    // exclude templates inside other templates
    std::set<size_t> toDel;
    for (size_t i = 0; i < templates.size(); ++i) {
        if (toDel.find(i) != toDel.end()) {
            continue;
        }

        cv::Rect bigRect = templates[i].sample.contour.sourceBoundingRect;
        int bigArea = templates[i].sample.contour.sourceBoundingRect.area();
        bigRect = cv::Rect(bigRect.x - 4, bigRect.y - 4, bigRect.width + 8, bigRect.height + 8);
        for (size_t j = i + 1; j < templates.size(); ++j) {
            if (contains(bigRect, templates[j].sample.contour.sourceBoundingRect)) {
                double a = templates[j].sample.contour.sourceBoundingRect.area();
                if (a / bigArea > 0.9) {
                    // choose template by rate
                    if (templates[i].rate > templates[j].rate) {
                        toDel.insert(j);
                    }
                    else {
                        toDel.insert(i);
                    }
                }
                else {  // delete tempate
                    toDel.insert(j);
                }
            }
        }
    }

    std::vector<FoundTemplateDesc> newTemplates;
    for (size_t i = 0; i < templates.size(); ++i) {
        if (toDel.find(i) == toDel.end()) {
            newTemplates.push_back(templates[i]);
        }
    }
    templates = newTemplates;
}

std::vector<std::vector<cv::Point>> ImageProcessor::filterContours(std::vector<std::vector<cv::Point>>& contours, cv::Mat& cannyFrame, int frameWidth, int frameHeight)
{
    int maxArea = frameWidth * frameHeight / 5;
    std::vector<std::vector<cv::Point>> result;
    for (auto& c : contours) {
        double area = fabs(contourArea(cv::Mat(c)));
        if (filterContoursBySize) {
            if (c.size() < minContourLength ||
                area < minContourArea || area > maxArea ||
                area / c.size() <= minFormFactor)
                continue;
        }

        if (noiseFilter) {
            cv::Point p1 = c[0];
            cv::Point p2 = c[(c.size() / 2) % c.size()];
            auto intensity1 = static_cast<int>(cannyFrame.at<uchar>(p1.y, p1.x));
            auto intensity2 = static_cast<int>(cannyFrame.at<uchar>(p2.y, p2.x));
            if (intensity1 == 0 && intensity2 == 0) {
                continue;
            }
        }
        result.push_back(c);
    }
    return result;
}

void ImageProcessor::generateTempaletByString(char* text, int font)
{
    double scale = 1.0;
    int thickness = 4;
    int baseline = 0;
    int sizeBorder = 2;
    onlyFindContours = true;
    char letter[2] = { 0,0 };
    std::string templtext = text;
    for (auto ch : templtext) {
        letter[0] = ch;
        cv::Size text = cv::getTextSize(letter, font, scale, thickness, &baseline);
        cv::Point p(sizeBorder, text.height + sizeBorder);
        cv::Mat bmp(text.height + 2 * sizeBorder, text.width + 2 * sizeBorder, CV_8UC3, CV_RGB(255, 255, 255));
        cv::putText(bmp, letter, p, font, scale, CV_RGB(0, 0, 0), thickness, 8);
        generateTemplateByImage(bmp, letter);
    }
    onlyFindContours = false;
}

void ImageProcessor::generateAntipatterns()
{
    onlyFindContours = true;
    //square
    {
        cv::Mat bmp(200, 200, CV_8UC3, CV_RGB(255, 255, 255));
        cv::Rect rect (10, 10, 80, 80);
        cv::rectangle(bmp, rect, CV_RGB(0, 0, 0), cv::FILLED);
        generateTemplateByImage(bmp, "antipattern");
    }
    //rect1
    {
        cv::Mat bmp(200, 200, CV_8UC3, CV_RGB(255, 255, 255));
        cv::Rect rect (10, 10, 50, 100);
        cv::rectangle(bmp, rect, CV_RGB(0, 0, 0), cv::FILLED);
        generateTemplateByImage(bmp, "antipattern");
    }
    //rect2
    {
        cv::Mat bmp(200, 200, CV_8UC3, CV_RGB(255, 255, 255));
        cv::Rect rect(10, 10, 20, 100);
        cv::rectangle(bmp, rect, CV_RGB(0, 0, 0), cv::FILLED);
        generateTemplateByImage(bmp, "antipattern");
    }
    //circle
    {
        cv::Mat bmp(200, 200, CV_8UC3, CV_RGB(255, 255, 255));
        cv::Rect rect(10, 10, 100, 100);
        cv::circle (bmp, cv::Point(60,60), 50,CV_RGB(0, 0, 0), cv::FILLED);
        generateTemplateByImage(bmp, "antipattern");
    }
    onlyFindContours = false;
}

void ImageProcessor::generateTemplateByImage(cv::Mat& bmp, const std::string& name)
{
    processImage(bmp);
    //find max contour
    if (samples.size() > 0) {
        std::sort(samples.begin(), samples.end(), [](const Template& t1, const Template& t2)
            { return t1.sourceArea > t2.sourceArea; });

        std::string strshorrtname = name;
        std::replace(strshorrtname.begin(), strshorrtname.end(), '\\', '/');
        std::string::size_type  pozBeg = strshorrtname.rfind('/');
        std::string::size_type  pozEnd = strshorrtname.rfind('_');

        if (std::string::npos == pozBeg)
            pozBeg = 0;
        else ++pozBeg;
        if (std::string::npos == pozEnd)
            pozEnd = strshorrtname.rfind('.');
        if (std::string::npos == pozEnd) pozEnd = strshorrtname.size() - 1;

        if (!strshorrtname.empty() && pozBeg >= 0 && pozEnd > 0)
        {
            strshorrtname = strshorrtname.substr(pozBeg, pozEnd - pozBeg);
        }
        else
        {
            strshorrtname = name;
        }
        samples[0].name = strshorrtname;
        templates.push_back(samples[0]);
    }
}

void ImageProcessor::generateTemplateFromFile(const std::string& filenameimage)
{
    cv::Mat image = cv::imread(filenameimage);
    if (!image.empty()) {
        generateTemplateByImage(image, filenameimage);
    }
}

void ImageProcessor::generateTemplateFromDir(const std::string& filenamedir)
{
    onlyFindContours = true;
#ifdef _WIN32
    for (auto & p : fsns::recursive_directory_iterator(filenamedir)) {
        if (fsns::is_regular_file(p)
            && ((p.path().extension().string().find(".png") != std::string::npos)
                || (p.path().extension().string().find(".jpg") != std::string::npos)
                || (p.path().extension().string().find(".JPG") != std::string::npos)
                || (p.path().extension().string().find(".PNG") != std::string::npos)
                || (p.path().extension().string().find(".BMP") != std::string::npos)
                || (p.path().extension().string().find(".bmp") != std::string::npos)
                )
            )
        {
            std::string fullfilename = p.path().string();
            generateTemplateFromFile(fullfilename);
        }
    }
#else
    DIR *dir;
    struct dirent *ent;
    if ((dir = opendir (filenamedir.c_str())) != NULL) {
        while ((ent = readdir (dir)) != NULL) {
            std::string filename = ent->d_name;
            if (filename.find(".png") != std::string::npos
                || filename.find(".jpg") != std::string::npos
                || filename.find(".JPG") != std::string::npos
                || filename.find(".PNG") != std::string::npos
                || filename.find(".bmp") != std::string::npos
                || filename.find(".BMP") != std::string::npos)
            {
                  std::string fullfilename = filenamedir + filename;
                  generateTemplateFromFile(fullfilename);
            }
        }
        closedir (dir);
    }
    else {
        throw std::runtime_error("folder not found");
    }
#endif
    onlyFindContours = false;
}

}
