/* C program for Merge Sort */
#include <pthread.h>
#include <smmintrin.h>
#include <stdio.h>
#include <stdint.h> 
#include <string.h> /* for memcpy */
#include <unistd.h> /* for sysconf */

int timer(void);

#define E sizeof(uint32_t)
#define L2 256000 //L2 cache size(bytes)
#define size 1000000 // number of elements
#define SIMD_W 4 //Simd width
#define NUM_THREADS 4
#define M L2/(2*E) //block size;

// Data types for either uint32_t/float that needs to be changed accordingly
#define MM_TYPE __m128i //type specific
#define MM_LOAD _mm_load_si128 //load function specific for data type
#define ALIGNED __attribute__ ((aligned (32))) //align data speicif to type
uint32_t arr [size];

typedef struct pthread_data
{
  uint32_t min;
  uint32_t max;
} p_data_t;


/*void merge_up(uint32_t *arr, uint32_t n)
{
  uint32_t step=n/2,i,j,k,temp;
  while (step > 0) {
    for (i=0; i < n; i+=step*2)
      {
        for (j=i,k=0;k < step;j++,k++)
          {
            if (arr[j] > arr[j+step])
              {
                // swap
                temp = arr[j];
                arr[j]=arr[j+step];
                arr[j+step]=temp;
              }
          }
      }
    step /= 2;
  }
}
void merge_down(uint32_t *arr, uint32_t n)
{
  uint32_t step=n/2,i,j,k,temp;
  while (step > 0)
    {
      for (i=0; i < n; i+=step*2)
        {
          for (j=i,k=0;k < step;j++,k++)
            {
              if (arr[j] < arr[j+step])
                {
                  // swap
                  temp = arr[j];
                  arr[j]=arr[j+step];
                  arr[j+step]=temp;
                }
            }
        }
      step /= 2;
    }
}
*/

void matrix_sort(MM_TYPE *vectors) 
{
  __m128i t[4];
  __m128i *x = &in[i];
  t[0] = _mm_min_epu32(x[0], x[1]);
  t[1] = _mm_max_epu32(x[0], x[1]);
  t[2] = _mm_min_epu32(x[2], x[3]);
  t[3] = _mm_max_epu32(x[2], x[3]);
  x[0] = _mm_min_epu32(t[0], t[2]);
  x[3] = _mm_max_epu32(t[1], t[3]);
  t[0] = _mm_max_epu32(t[0], t[2]);
  t[1] = _mm_min_epu32(t[1], t[3]);
  x[1] = _mm_min_epu32(t[0], t[1]);
  x[2] = _mm_max_epu32(t[0], t[1]);

}

  


void register_sort(p_data_t* limits)
{
  uint32_t i,j;
  uint32_t elements = limits->min - limits->max;
  if (!elements % SIMD_W)
    {
      pruint32_tf("Error, data is not divisble by %i ",SIMD_W);
    }
  MM_TYPE vectors[elements / SIMD_W];  
  for (i = 0; i < elements; i += SIMD_W)
    {
      uint32_t insert[SIMD_W];
      for (j = 0; j < SIMD_W; j++)
        {
          insert[j] = arr[i + j];
        }
      vectors[i] = MM_LOAD((MM_TYPE*)insert);
    }
  matrix_sort(vectors);
}

uint32_t main()
{
  pthread_t threads[NUM_THREADS];
  uint32_t i;
  void *status;
  p_data_t limits[NUM_THREADS];
  srand(timer());
  for (i = 0; i < size; i++)
    {
      arr[i] = rand()%10000;//%1000;
    }
  matrix_sort();
}
