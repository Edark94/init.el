/* C program for Merge Sort */
#include <pthread.h>
#include <smmintrin.h>
#include <stdio.h>
#include <stdint.h> 
#include <string.h> /* for memcpy */
#include <unistd.h> /* for sysconf */

int timer(void);

#define E sizeof(uint32_t)
#define L2 256000 //L2 cache SIZE(bytes)
#define SIZE 64000 // number of elements
#define SIMD_W 4 //Simd width
#define NUM_THREADS 4
#define M L2/(2*E) //block SIZE;

uint32_t *arr;
int NUMBERS_PER_THREAD;

typedef struct pthread_data
{
  uint32_t min;
  uint32_t max;
} p_data_t;

//Takes 4 * 4 elements and sort them all in ascending order without
//branching
void matrix_sort(__m128i *x) 
{
  __m128i t[4];
  t[0] = _mm_min_epu32(x[0], x[1]);
  t[1] = _mm_max_epu32(x[0], x[1]);
  t[2] = _mm_min_epu32(x[2], x[3]);
  t[3] = _mm_max_epu32(x[2], x[3]);
  x[0] = _mm_min_epu32(t[0], t[2]);
  x[3] = _mm_max_epu32(t[1], t[3]);
  t[0] = _mm_max_epu32(t[0], t[2]);
  t[1] = _mm_min_epu32(t[1], t[3]);
  x[1] = _mm_min_epu32(t[0], t[1]);
  x[2] = _mm_max_epu32(t[0], t[1]);
  _MM_TRANSPOSE4_PS(x[0],x[1],x[2],x[3]);
}

void register_sort(p_data_t* limits)
{
  uint32_t i,j;
  uint32_t elements = limits->min - limits->max;
  if (!elements % SIMD_W)
    {
      print32_tf("Error, data is not divisble by %i ",SIMD_W);
    }
  MM_TYPE vectors[elements / SIMD_W];  
  for (i = 0; i < elements; i += SIMD_W)
    {
      uint32_t insert[SIMD_W];
      for (j = 0; j < SIMD_W; j++)
        {
          insert[j] = arr[i + j];
        }
      vectors[i] = MM_LOAD((MM_TYPE*)insert);
    }
  matrix_sort(vectors);
}

int main()
{
  
  pthread_t threads[NUM_THREADS];
  int i;
  void *status;
  p_data_t limits[NUM_THREADS];
  srand(timer());
  arr = valloc(E * SIZE);
  for (i = 0; i < SIZE; i++)
    {
      arr[i] = rand()%1000;//%1000;
    } 
  NUMBERS_PER_THREAD = SIZE/NUM_THREADS;
  int time = timer();
  for (i = 0; i < NUM_THREADS; ++i)
    {      
      limits[i].min = i * NUMBERS_PER_THREAD;
      if (i == NUM_THREADS - 1)
        {
          limits[i].max = SIZE-1;
        }
      else
        {
          limits[i].max = (i+1) * NUMBERS_PER_THREAD;
        }      
      printf("TThread %i Min is: %i Max is: %i\n",i,limits[i].min,limits[i].max);
      pthread_create(&threads[i], NULL, thread_merge_sort, (void *)&limits[i]);
    }
  for (i = 0; i < NUM_THREADS; ++i)
    {
      int rc = pthread_join(threads[i],&status);
      if (rc)
        {
          printf("Error, issue in thread %d \n",rc);
          exit(-1);          
        }
    }
  int len = NUM_THREADS/2;
  //Check if its an odd number of threads
  if (NUM_THREADS%2 == 1)
    {
      merge(arr,limits[NUM_THREADS-2].min,limits[NUM_THREADS-1].max);
      limits[NUM_THREADS-2].max = limits[NUM_THREADS-1].max;
    }
  //Merges the remaining,
  while(len > 1)
    {
      //p_data_t finalmerge[len];
      for (i = 0; i < len; i+=2)
        {        
          merge(arr,limits[i].min,limits[i+1].max);
          limits[i].max = limits[i+1].max;
        }
      len = len/2;
    }
  merge(arr,0,SIZE-1);
  /*merge(arr,0,limits[1].max);
  merge(arr,limits[2].min+1,SIZE);
  merge(arr,0,SIZE);*/
  
  time=timer()-time;
  printf("Elapsed time: %f \n",time/1000000.0);
  //printArray(arr,SIZE);
  pthread_exit(NULL);
 }
