#include <string.h>
#include <stdbool.h>
#include "CUnit/Basic.h"
#include "ioopm_hash_table.h"
#include "list.h"
int init_suite(void)
{
  return 0;
}

int clean_suite(void)
{
  return 0;
}

void insert_test(void)
{
  ioopm_hash_table_t *ht = ioopm_hash_table_create();
  ioopm_hash_table_insert(ht, 0, "4");
  ioopm_hash_table_insert(ht, 17, "3");
  ioopm_hash_table_insert(ht, -18, "1");
  ioopm_hash_table_insert(ht, -1, "0");
  ioopm_hash_table_insert(ht, 1, "2");
  ioopm_hash_table_insert(ht, 35, "1");
  ioopm_hash_table_insert(ht, 18, "0");
  CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht, 0));
  CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht, 17));
  CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht, -18));
  CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht, -1));
  CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht, 35));
  CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht, 18)); 
  ioopm_hash_table_destroy(ht);
}

void lookup_test()
{
   ioopm_hash_table_t *ht = ioopm_hash_table_create();
   for (int i = 0; i <= Nmr_Buckets; ++i) /// INFO GÖMNING FRÅN 18 
     {
       CU_ASSERT_PTR_NULL(ioopm_hash_table_lookup(ht, i));
     }
   ioopm_hash_table_insert(ht, 1, "2");
   ioopm_hash_table_insert(ht, 35, "1");
   ioopm_hash_table_insert(ht, -2, "10");
   CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht, 1));
   CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht, -2));
   CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht, 35));
   CU_ASSERT_PTR_NULL(ioopm_hash_table_lookup(ht, 52));
   CU_ASSERT_PTR_NULL(ioopm_hash_table_lookup(ht, -1));
   CU_ASSERT(ioopm_hash_table_has_key(ht,1));
   CU_ASSERT(ioopm_hash_table_has_key(ht,0) == false);
   CU_ASSERT(ioopm_hash_table_has_key(ht,35));
   char **list = ioopm_hash_table_values(ht);
   CU_ASSERT(strcmp(list[0],"1") == 0);
   CU_ASSERT(strcmp(list[1],"2") == 0);
   CU_ASSERT(strcmp(list[2],"10") == 0);
   free(list);
   CU_ASSERT(ioopm_hash_table_has_value(ht,"2"));
   CU_ASSERT(ioopm_hash_table_has_value(ht,"1"));
   CU_ASSERT_FALSE(ioopm_hash_table_has_value(ht,"0"));
   CU_ASSERT_FALSE(ioopm_hash_table_has_value(ht,""));
   ioopm_hash_table_destroy(ht);
}

void remove_test(void)//remove test
{
  ioopm_hash_table_t *ht = ioopm_hash_table_create();
  ioopm_hash_table_insert(ht, 1, "2");
  ioopm_hash_table_insert(ht, 35, "1");
  ioopm_hash_table_remove(ht, 1);
  CU_ASSERT_PTR_NULL(ioopm_hash_table_lookup(ht,1));
  CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht,35));
  ioopm_hash_table_insert(ht, 1, "3");
  CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht,1));
  ioopm_hash_table_remove(ht, 35);
  CU_ASSERT_PTR_NOT_NULL(ioopm_hash_table_lookup(ht,1));
  CU_ASSERT_PTR_NULL(ioopm_hash_table_lookup(ht,35));
  ioopm_hash_table_destroy(ht);
}

void count_test(void)
{
  ioopm_hash_table_t *ht = ioopm_hash_table_create();
  ioopm_hash_table_insert(ht, 1, "2");
  ioopm_hash_table_insert(ht, 35, "1");
  CU_ASSERT(ioopm_hash_table_size(ht) == 2 );
  ioopm_hash_table_remove(ht, 1);
  CU_ASSERT(ioopm_hash_table_size(ht) == 1 );
  ioopm_hash_table_insert(ht, 0, "4");
  ioopm_hash_table_insert(ht, 17, "3");
  CU_ASSERT(ioopm_hash_table_size(ht) == 3 );
  ioopm_hash_table_insert(ht, -65, "3");
  CU_ASSERT(ioopm_hash_table_size(ht) == 4 );
  ioopm_hash_table_destroy(ht);
}

void empty_test(void)
{
  ioopm_hash_table_t *ht = ioopm_hash_table_create();
  CU_ASSERT(ioopm_hash_table_is_empty(ht) == true);
  ioopm_hash_table_insert(ht, 1, "2");
  ioopm_hash_table_insert(ht, 35, "1");
  CU_ASSERT(ioopm_hash_table_is_empty(ht) == false);
  ioopm_hash_table_remove(ht, 1);
  CU_ASSERT(ioopm_hash_table_is_empty(ht) == false);
  ioopm_hash_table_remove(ht, 35);
  CU_ASSERT(ioopm_hash_table_is_empty(ht) == true);
  ioopm_hash_table_clear(ht);
  CU_ASSERT(ioopm_hash_table_is_empty(ht) == true);
  ioopm_hash_table_destroy(ht);
}

void list_keys_test(void)
{
  ioopm_hash_table_t *ht = ioopm_hash_table_create();
  ioopm_hash_table_insert(ht, 1, "2");
  ioopm_hash_table_insert(ht, 35, "1");
  ioopm_hash_table_insert(ht, 0, "1");
  CU_ASSERT(ioopm_hash_table_size(ht) == 3);
  int *keylist = ioopm_hash_table_keys(ht);
  CU_ASSERT(keylist[0] == 0);
  CU_ASSERT(keylist[1] == 35);
  CU_ASSERT(keylist[2] == 1);
  ioopm_hash_table_destroy(ht);
  free(keylist);
}

void list_values_test(void)
{
  ioopm_hash_table_t *ht = ioopm_hash_table_create();
  ioopm_hash_table_insert(ht, 1, "");
  ioopm_hash_table_insert(ht, 35, "2");
  ioopm_hash_table_insert(ht, 0, "1");
  char **keylist = ioopm_hash_table_values(ht);
  CU_ASSERT(strcmp(keylist[0],"1") == 0);
  CU_ASSERT(strcmp(keylist[1],"2") == 0);
  CU_ASSERT(strcmp(keylist[2],"") == 0);
  ioopm_hash_table_destroy(ht);
  free(keylist);
}

bool value_equiv_test(int y,char *value1, void *x)
{ 
  char **value2_ptr = x;
  char *value2 = *value2_ptr;
  if (strcmp(value1,value2) == 0)
    {
      return true;
    }
  else
    {
      return false;
    }
}

bool key_equiv_test(int key1,char *y, void *x)
{ 
  int *key2_ptr = x;
  int key2 = *key2_ptr;
  return key1 == key2;
}



void all_entries_test(void)
{
  ioopm_hash_table_t *ht = ioopm_hash_table_create();
  ioopm_hash_table_insert(ht, 1, "1");
  ioopm_hash_table_insert(ht, 18, "1");
  ioopm_hash_table_insert(ht, -1, "1");
  char *test = "1";
  CU_ASSERT(ioopm_hash_table_all(ht,value_equiv_test,&test));
  ioopm_hash_table_insert(ht, 1, "");
  CU_ASSERT_FALSE(ioopm_hash_table_all(ht,value_equiv_test,&test));
  ioopm_hash_table_remove(ht ,1);
  ioopm_hash_table_remove(ht ,18);
  int test2 = -1;
  CU_ASSERT(ioopm_hash_table_all(ht,key_equiv_test,&test2));
  ioopm_hash_table_destroy(ht);
}


bool copy(int key, char *value, void *ht)
{
  ioopm_hash_table_insert(ht,key,value);
  return true;
}
void apply_all_test(void)
{
  ioopm_hash_table_t *ht = ioopm_hash_table_create();
  ioopm_hash_table_t *ht2 = ioopm_hash_table_create();
  ioopm_hash_table_insert(ht, 0, "A");
  ioopm_hash_table_insert(ht, 1, "B");
  ioopm_hash_table_insert(ht, 2, "C");
  ioopm_hash_table_apply_to_all(ht,copy,ht2);
  char **keylist = ioopm_hash_table_values(ht2);
  CU_ASSERT(strcmp(keylist[0],"A") == 0);
  CU_ASSERT(strcmp(keylist[1],"B") == 0);
  CU_ASSERT(strcmp(keylist[2],"C") == 0);
  free(keylist);
  ioopm_hash_table_destroy(ht2);
  ioopm_hash_table_destroy(ht);
}


void linked_create_test(void)
{
  ioopm_list_t *lt = ioopm_linked_list_create();
  CU_ASSERT_PTR_NOT_NULL(lt->first);
  ioopm_linked_list_prepend(lt,1);
  CU_ASSERT(ioopm_linked_list_remove(lt,0) == 1);
  ioopm_linked_list_prepend(lt,2);
  ioopm_linked_list_prepend(lt,-1);
  CU_ASSERT(ioopm_linked_list_remove(lt,0) == -1);
  CU_ASSERT(ioopm_linked_list_remove(lt,0) == 2);
  CU_ASSERT(ioopm_linked_list_remove(lt,2) == -999);
  ioopm_linked_list_insert(lt,0,2);
  ioopm_linked_list_insert(lt,0,0);
  ioopm_linked_list_insert(lt,1,1);
  CU_ASSERT(ioopm_linked_list_remove(lt,0) == 0);
  CU_ASSERT(ioopm_linked_list_remove(lt,1) == 2);
  ioopm_linked_list_destroy(lt);
}


int main()
{
  CU_pSuite test_suite1 = NULL;

  if (CUE_SUCCESS != CU_initialize_registry())
    return CU_get_error();

  test_suite1 = CU_add_suite("Test Suite 1", init_suite, clean_suite);
  if (NULL == test_suite1)
    {
      CU_cleanup_registry();
      return CU_get_error();
    }

  if (
      (NULL == CU_add_test(test_suite1, "Hash Insertion test", insert_test)) ||
      (NULL == CU_add_test(test_suite1, "Hash Lookup key/value test", lookup_test)) ||
      (NULL == CU_add_test(test_suite1, "Hash Remove node test", remove_test)) ||
      (NULL == CU_add_test(test_suite1, "Hash Count nodes test", count_test)) ||
      (NULL == CU_add_test(test_suite1, "Hash Empty test", empty_test)) ||
      (NULL == CU_add_test(test_suite1, "Hash Key list test", list_keys_test))||
      (NULL == CU_add_test(test_suite1, "Hash Value list test", list_values_test))||
      (NULL == CU_add_test(test_suite1, "Hash All entries test", all_entries_test))||
      (NULL == CU_add_test(test_suite1, "Hash apply all test", apply_all_test))||
      (NULL == CU_add_test(test_suite1, "Linked create test", linked_create_test))
      )
    {
      CU_cleanup_registry();
      return CU_get_error();
    }

  CU_basic_set_mode(CU_BRM_VERBOSE);
  CU_basic_run_tests();
  CU_cleanup_registry();
  return CU_get_error();
}
