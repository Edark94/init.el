// File Parser.java
import java.io.StreamTokenizer;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Parser {
private final StreamTokenizer st = new StreamTokenizer(System.in);

    public Parser()
    {
        this.st.ordinaryChar('/');
        this.st.ordinaryChar('-');
        this.st.eolIsSignificant(true);
    }


    public SymbolicExpression statement() throws IOException
    {
        this.st.nextToken();
        if (new String("quit").equals(this.st.sval))
            {
                return new Quit();
            }
        else if (new String("vars").equals(this.st.sval))
            {
                Vars.printAll;
            }
        else
            {
                this.st.pushBack();
                return assignment();
            }
    }

    public SymbolicExpression assignment() throws IOException
    {
        SymbolicExpression result = expression();
        this.st.nextToken();
        if(st.ttype == '=' && this.st.nextToken() == this.st.TT_WORD)
            {
                 System.out.println("id"); 
                return new Assignment(result, identifier());
            }
        else
            {
              System.out.println("Heeeere");
              return result;
              //throw new IOException();
            }
    }
		
    //Vet inte riktigt vilken typ den ska ha, läser alla variabler till höger om uttrycket iaf
    public SymbolicExpression identifier() throws IOException
    {
        
        SymbolicExpression result = variable(); 
        if(this.st.ttype == this.st.TT_WORD)
            {
                if(this.st.nextToken() == this.st.TT_EOL)
                    {
                        this.st.pushBack();
                        return new SymbolicExpression("Id", result);
                    }
                else
                    {
                        this.st.nextToken();
                        return new SymbolicExpression("Id",  result, identifier());
                    }
            }
        else
            {

                throw new IOException();
            }
    }


    public SymbolicExpression expression() throws IOException
    {
        SymbolicExpression result = term();
        while(st.ttype == '+' || st.ttype == '-')
            {
                System.out.println("while");
                int operation = st.ttype;
                st.nextToken();
                if (operation == '+')
                    {
                        
                        result = new Addition(result, term());
                    }
                else
                    {
                        result = new  Subtraction(result, term());
                    }
            }
        return result;
    }

    private SymbolicExpression term() throws IOException
    {
        SymbolicExpression prod = factor();
        this.st.nextToken();
        while (st.ttype == '*' || st.ttype == '/')
            {
                System.out.println("While");
                int operation = st.ttype;
                st.nextToken();
                if (operation == '*')
                    {
                        this.st.pushBack();
                        prod = new Multiplication(prod, factor());
                    }
                else
                    {
                       this.st.pushBack(); 
                       prod = new Division(prod, factor());
                    }
            }
        this.st.pushBack();
        return prod;
    }

    private SymbolicExpression factor() throws IOException
    {
        SymbolicExpression result;
        if (this.st.nextToken() == '(')
            {
            result = expression();
            if (this.st.nextToken() != ')')
                {
                    throw new SyntaxErrorException("expected ')'");
                }
            }
        else
            {
                this.st.pushBack();
                if (this.st.ttype == this.st.TT_NUMBER)
                    {
                        
                        //this.st.pushBack();
                        result = number();
                    }
                else if (this.st.ttype == this.st.TT_WORD && this.st.sval.length() == 1)
                    {
                        //this.st.pushBack();
                        result = variable();
                    }
                else
                    {
                        
                        //this.st.pushBack();
                        result = unary();
                    }
            }
        return result;
    }

    private SymbolicExpression number() throws IOException
    {
        if (this.st.nextToken() == this.st.TT_NUMBER)
            {
                return new Constant(this.st.nval);
            }
        else
            {
                throw new SyntaxErrorException("Expected number");
            }
    }

    private SymbolicExpression variable() throws IOException
    {
        SymbolicExpression result = new Variable(this.st.sval);
        if(Vars.checkUp(result))
            {
                return Vars.getValue(result));
                
            }
        else
            {
                return result;
            }
    }

    private SymbolicExpression unary() throws IOException
    {
        this.st.nextToken();
        if(new String("sin").equals(this.st.sval))
            {
                return new Sin(factor());
            }
        else if(new String("cos").equals(this.st.sval))
            {
                return new Cos(factor());
            }
        else if(new String("log").equals(this.st.sval))
            {
                return new Log(factor());
            }
        else if(new String("exp").equals(this.st.sval))
            {
                return new Exp(factor());
            }
        else if(this.st.ttype == '-')
            {
                return new Negation(factor());
            }
        else
            {
               
              throw new IOException();
            }
    }
}
